{"name":"Custom Calendar View for Android","tagline":"The CustomCalendarView provides an easy and customizable calendar to create a Calendar. It dispaly the days of a month in a grid layout and allows to navigate between months","body":"To use the CustomCalendarView in your application, you first need to add the library to your application. You can do this by either from Gradle, Maven or by directly downloading the source code form GitHub.\r\n\r\n## Features\r\nCurrently it supports the following features:\r\n* Next and previous month navigation\r\n* Allow various customization including background color for day, week and title\r\n* Set custom typeface using setCustomTypeFace() method.\r\n* Show hide next previous month overflow days\r\n* Set custom day options for start day of week. By default it is set to Calendar.SUNDAY\r\n* Unlimited customizations for day of the month using custom Decorators.\r\n* Allow you to handle event when user changes month and day selection.\r\n\r\nIf you enjoy this library, don’t forget to follow me on my twitter handle [@javatechig](https://www.twitter.com/npanigrahy) or visit my blog at [http://javatechig.com](https://javatechig.com/)\r\n\r\n![alt text][logo]\r\n\r\n[logo]: http://javatechig.com/wp-content/uploads/2015/09/Custom-Calendar-View-Android.png \"Custom Calendar View Library in Android\"\r\n\r\n### Gradle\r\n**Step 1** Add the JitPack repository to your build file. Add it in your build.gradle at the end of repositories.\r\n\r\n```java\r\n  repositories {\r\n    maven { url \"https://jitpack.io\" }\r\n  }\r\n```\r\n\r\n**Step-2** Add the dependency in the form\r\n\r\n```java\r\ndependencies {\r\n    compile 'com.github.npanigrahy:Custom-Calendar-View:v1.0'\r\n}\r\n```\r\n### Maven\r\n```xml\r\n<repository>\r\n     <id>jitpack.io</id>\r\n     <url>https://jitpack.io</url>\r\n</repository>\r\n```\r\n**Step 2** Add the dependency in the form\r\n```xml\r\n<dependency>\r\n     <groupId>com.github.npanigrahy</groupId>\r\n     <artifactId>Custom-Calendar-View</artifactId>\r\n     <version>v1.0</version>\r\n</dependency>\r\n```\r\n### Sbt\r\n**Step-1** Add it in your build.sbt at the end of resolvers:\r\n```java\r\nresolvers += \"jitpack\" at \"https://jitpack.io\"\r\n```\r\n**Step-2** Add the dependency in the form\r\n```java\r\nlibraryDependencies += \"com.github.npanigrahy\" % \"Custom-Calendar-View\" % \"v1.0\"\r\n```\r\n\r\n## Using CustomCalendarView Library\r\nThe GitHub project source includes a sample application, that is used for demonstrating the various features currently supported by this library. Once the library is added to your project, you can include the CustomCalendarView into your activity/fragment layout using the following code snippets.\r\n\r\n```xml\r\n<com.imanoweb.calendarview.CustomCalendarView\r\n\tandroid:id=\"@+id/calendar_view\"\r\n\tandroid:layout_width=\"match_parent\"\r\n\tandroid:layout_height=\"wrap_content\"\r\n\tandroid:background=\"#ffffff\">\r\n</com.imanoweb.calendarview.CustomCalendarView>\r\n```\r\nThe above code snippet will show the simple Calendar View with default design. Now, you can use the following attributes, to customize the appearance of calendar.\r\n```xml\r\n<com.imanoweb.calendarview.CustomCalendarView\r\n        android:id=\"@+id/calendar_view\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:background=\"@color/off_white\"\r\n        app:calendarBackgroundColor=\"@color/off_white\"\r\n        app:calendarTitleTextColor=\"@color/black\"\r\n        app:currentDayOfMonthColor=\"@color/blue\"\r\n        app:dayOfMonthTextColor=\"@color/black\"\r\n        app:dayOfWeekTextColor=\"@color/black\"\r\n        app:disabledDayBackgroundColor=\"@color/off_white\"\r\n        app:disabledDayTextColor=\"@color/grey\"\r\n        app:selectedDayBackgroundColor=\"@color/blue\"\r\n        app:titleLayoutBackgroundColor=\"@color/white\"\r\n        app:weekLayoutBackgroundColor=\"@color/white\">\r\n</com.imanoweb.calendarview.CustomCalendarView>\r\n```\r\nLet us now, initialize the calendar view to control the various other appearance and behavior of calendar using the following methods.\r\n```java\r\n//Initialize CustomCalendarView from layout\r\ncalendarView = (CustomCalendarView) findViewById(R.id.calendar_view);\r\n\r\n//Initialize calendar with date\r\nCalendar currentCalendar = Calendar.getInstance(Locale.getDefault());\r\n\r\n//Show Monday as first date of week\r\ncalendarView.setFirstDayOfWeek(Calendar.MONDAY);\r\n\r\n//Show/hide overflow days of a month\r\ncalendarView.setShowOverflowDate(false);\r\n\r\n//call refreshCalendar to update calendar the view\r\ncalendarView.refreshCalendar(currentCalendar);\r\n\r\n//Handling custom calendar events\r\ncalendarView.setCalendarListener(new CalendarListener() {\r\n    @Override\r\n    public void onDateSelected(Date date) {\r\n        SimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n        Toast.makeText(MainActivity.this, df.format(date), Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    @Override\r\n    public void onMonthChanged(Date date) {\r\n        SimpleDateFormat df = new SimpleDateFormat(\"MM-yyyy\");\r\n        Toast.makeText(MainActivity.this, df.format(date), Toast.LENGTH_SHORT).show();\r\n    }\r\n});\r\n```\r\n\r\n## Using Custom TypeFace\r\n\r\n```java\r\n//Setting custom font\r\nfinal Typeface typeface = Typeface.createFromAsset(getAssets(), \"fonts/Arch_Rival_Bold.ttf\");\r\nif (null != typeface) {\r\n    calendarView.setCustomTypeface(typeface);\r\n    calendarView.refreshCalendar(currentCalendar);\r\n}\r\n```\r\nCustom Calendar View Library in Android Custom Font\r\n\r\n## Using Day Decorators\r\n```java\r\n//adding calendar day decorators\r\nList decorators = new ArrayList<>();\r\ndecorators.add(new ColorDecorator());\r\ncalendarView.setDecorators(decorators);\r\ncalendarView.refreshCalendar(currentCalendar);\r\nCustom Calendar View Library in Android Decorator\r\n```\r\n<img src=\"http://javatechig.com/wp-content/uploads/2015/09/Custom-Calendar-View-Library-in-Android-Decorator.png\" height=\"350\">\r\n\r\n## License\r\n```\r\n/*\r\n * Copyright (C) 2015 JavaTechig {link: http://javatechig.com}.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n```\r\nIf you enjoy this library, don’t forget to follow us on our twitter handle @javatechig.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}